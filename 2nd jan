#question 4
You are given an integer array nums of length n.

Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:

F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].
Return the maximum value of F(0), F(1), ..., F(n-1).

The test cases are generated so that the answer fits in a 32-bit integer.

Solution-
    int maxRotateFunction(vector<int>& nums) {
        vector<int>temp(nums.size(),0);
        int ans=INT_MIN,n=nums.size();
        int sum=0,curr=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            curr+=i*nums[i];
        }
        ans=max(ans,curr);
        temp[0]=curr;
        int lastIdx=nums.size()-1;
        for(int i=1;i<temp.size();i++)
        {
            temp[i]=temp[i-1]+sum-(n*nums[lastIdx]);
            lastIdx--;
            ans=max(ans,temp[i]);
        }
        return ans;
    }
    
    
    
  5. Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.
Solution :
vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int>hash(n);
        for(int i=0;i<n;i++)
        hash[i]=i;
     sort(nums.begin(),nums.end());
     int lastIdx=0;
    vector<int>dp(n,1);
   int ans=1;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
        
            if(nums[i]%nums[j]==0)
            {
              if(dp[j]+1>dp[i])
              {
                  dp[i]=dp[j]+1;
                  hash[i]=j;
              }
                if(dp[i]>ans)
                {
                    ans=dp[i];
                    lastIdx=i;
                }
            }
        }
    }
    vector<int>arr;
while(hash[lastIdx]!=lastIdx)
{
    arr.push_back(nums[lastIdx]);
    lastIdx=hash[lastIdx];
}
arr.push_back(nums[lastIdx]);
    return arr;

    }
  
  6.. Perfect Rectangle
  Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).

Return true if all the rectangles together form an exact cover of a rectangular region.


Solution--
    bool isRectangleCover(vector<vector<int>>& rectangles) {
        unordered_map<long long, int> mark;
        const long long N=1000000;
        for(vector<int>& x:rectangles){
            int x1=x[0];
            int y1=x[1];
            int x2=x[2];
            int y2=x[3];
            mark[x1*N+y1]++;
            mark[x1*N+y2]--;
            mark[x2*N+y1]--;
            mark[x2*N+y2]++;
        }
        int n_mark=0;
        for(auto ptr=mark.begin();ptr!=mark.end();ptr++)
            if(ptr->second!=0){
                if(abs(ptr->second)!=1) return false;
                n_mark++;
            }
        return n_mark==4;
    }
    
    
 7. Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.

Return true if you can finish all courses. Otherwise, return false.

Solution:
 bool canFinish(int num, vector<vector<int>>& pre) {
        if(pre.size()==0)
        return 1;
      //return false it it has loop making a directed graph
       map<int,vector<int>>adj;
       vector<int>indegree(num,0);
       for(int i=0;i<pre.size();i++)
       {
           int x = pre[i][0];
           int y = pre[i][1];
           adj[x].push_back(y);
           indegree[y]++;
       } 
       //using toposort
       queue<int>q;
       
       int cnt=0;
       for(int i=0;i<num;i++)
       {
           if(indegree[i]==0){
           q.push(i);
           }
       }
       while(!q.empty())
       {
           int node = q.front();q.pop();
           for(auto it:adj[node])
           {
              indegree[it]--;
              if(indegree[it]==0)
              q.push(it);
           }
           cnt++;
       }
       if(cnt==num)
       return 1;
       return 0;
       
       
    }
    
    
   8.Most Profitable Path in a Tree
   
   solution--
   class Solution {
public:
map<int,vector<int>>adj;
vector<int>parent,dist;
int ans=0,maxAns=INT_MIN;
void dfs1(int node,int d,int p)
{
    dist[node]=d;
    parent[node]=p;
    for(auto it:adj[node])
    {
        if(it==p)
        continue;
        dfs1(it,d+1,node);
    }

    
}
set<int>visited;
    void dfs(int curr,vector<int>&amount)
    {
        visited.insert(curr);
        ans+=amount[curr];
        int trav=0;
        for(auto i :adj[curr])
        {
            if(visited.find(i)!=visited.end())
                continue;
            trav++;dfs(i,amount);}
    if(trav==0)
    {
        maxAns=max(ans,maxAns);
    }
    ans=ans-amount[curr];}

    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
      for(int i=0;i<edges.size();i++)
      { 
          dist.push_back(-1);
          parent.push_back(-1);
          int x = edges[i][0];
          int y =edges[i][1];
          adj[x].push_back(y);
          adj[y].push_back(x);
      } 
       dist.push_back(-1);
          parent.push_back(-1);
      dfs1(0,0,0); 
      int curr =bob,currDist=0;
      while(curr!=0)
      {
          if(dist[curr]==currDist)
          amount[curr]=amount[curr]/2;
          else if(dist[curr]>currDist)
          amount[curr]=0;
          currDist++;
          curr=parent[curr];
      }      
      dfs(0,amount);
      return maxAns;
    }
};
